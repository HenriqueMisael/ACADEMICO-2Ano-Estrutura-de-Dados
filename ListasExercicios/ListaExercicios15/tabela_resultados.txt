O Merge Sort é um método eficiente de ordenação que consiste em dividir e conquistar. Através da recursividade, o algoritmo reduz o problema até existir apenas 1 elemento no vetor a ser ordenado. Então parte para o próximo vetor de uma posição, ordenado. Assim, temos 2 vetores de 1 posição ordenados. Junta-se eles em 1 vetor de 2 posições e ordena. Então parte para o próximo vetor de uma posição; ordenado. O outro, também ordenado. E então estes dois são ordenados, formando um segundo vetor de duas posições ordenado. Junta-se estes dois ordenando, e forma-se um vetor de quatro posições ordenado. Assim até que se tenha o vetor inteiro ordenado.
O Quick Sort é um método eficiente de ordenação que consiste em dividir e conquistar. Consiste em, recursivamente, encontrar um pivô, e dividir a lista a ser ordenada em duas partes: à direita do pivô os valores maiores que este, e à esquerda os valores menores. Feito isso, é encontrado um pivô na lista da esquerda e o método se repete até que reste apenas a lista atômica (com apenas o pivô, e posteriormente com três elementos, e o pivô no meio). Feito isso, o algoritmo recursivo volta parte para a lista à direita do último pivô calculado.
O Heap Sort é um método eficiente de ordenação que faz parte do grupo de algoritmos de seleção. Utiliza de árvores binárias estáticas para ordenar um vetor. Primeiramente, torna o vetor em um heap, ou seja, uma árvore binária estática, ordenado de maneira que o maior elemento fique na raiz. Feito isso, troca-se a raiz pelo último elemento do vetor, e coloca esta em sua posição no vetor (a primeira). Seguindo, repete o processo recursivamente, trocando a raiz pelo elemento na posição (TAMANHO-x), e adionando a nova raiz depois na posição x do vetor (incrementada a cada nova inserção). Ao final, temos o vetor ordenado, e a árvore virtual inexistente (uma vez que vai de TAMANHO até x, e ambos os valores são iguais ao final do algoritmo).

			1ª Tentativa	2ª Tentativa	3ª Tentativa	4ª Tentativa	Total		Médio
QuickSort: 	 0.246988		0.233907		0.234031		0.200204		0,91513		0,228783
MergeSort: 	 0.299416		0.348173		0.398622		0.387152		1,43336		0,358341
HeapSort: 	 0.425371		0.405577		0.434603		0.404834		1,67039		0,417596

Foram feitas quatro tentativas com todos os algoritmos, sempre ordenando todos os casos apresentados no arquivo de entrada.
Analisando, de maneira geral, a diferença entre a velocidade de ordenação (ignorando todo o tempo de leitura dos arquivos e escrita nos arquivos de resultado) é muito semelhante, apresentando uma leve variação.
Temos o QuickSort apresentando o melhor desempenho em todas as tentativas, levando praticamente a metade do tempo do HeapSort em quase todas as tentativas. O tempo médio demonstra isto.
Temos o HeapSort demonstrando ser o mais lento de todos os métodos em todos os casos, possuindo tempo total maior de 1,5s para quatro repetições da ordenação.
O MergeSort, apesar de ter o resultado mediano, demonstra um desempenho desfavorável, uma vez que seu uso de memória é extremamente alto comparado aos outros. Assim sendo, não é desejável.
Embora todos tenham um resultado com diferênça mínima para o volume de dados, a melhor escolha para desempenho se torna o QuickSort, enquanto o MergeSort é de implementação mais simples.
